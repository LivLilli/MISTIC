import pandas as pd

class TopicSelector:
    '''
    TopicSelector object contains methods for tagging and filtering textual data by topic.

    :param input_path: path to the input data to process
    :type input_path: str
    :param regex_pattern: pattern regex to query text data
    :type regex_pattern: str
    :param column_to_filter: column name of the textual data to filter
    :type column_to_filter: str
    '''

    def __init__(self, input_path, regex_pattern, column_to_filter):

        self.data = pd.read_csv(input_path)
        self.regex_pattern = regex_pattern
        self.column = column_to_filter

    def filter_by_topic(self):
        '''
        This method filter the dataset by texts containg the regex pattern.

        :return: the dataset filtered by topic
        '''

        data_to_filter = self.data
        data_to_filter = data_to_filter[data_to_filter[self.column].notnull()]
        data_to_filter[self.column] = data_to_filter[self.column].str.lower()

        return data_to_filter[data_to_filter[self.column].str.contains(self.regex_pattern)]
    def tag_data_by_topic(self, data_filtered_by_topic):
        '''
        This method tags each text with respect to the lemma contained inside and the information about the concept of
        presence/absence. Input table to use with this method must contain the columns "parole chiave" and "livello_categoria_1"
        which are automatically generated by the SAS text analytics software, in the rule-based labelling process.

        :return: the original dataset with tag columns LEMMA and CATEGORY.
        '''

        data_topic_tag = data_filtered_by_topic.copy()
        lemma_list = self.regex_pattern.split('|')

        for lemma in lemma_list:

            data_topic_tag.loc[data_topic_tag['parole chiave'].str.contains(lemma), 'LEMMA'] = lemma  # add lemma tag

        data_topic_tag.loc[data_topic_tag['LEMMA'] == 'secondar', 'LEMMA'] = 'metas'
        data_topic_tag.loc[data_topic_tag['livello_categoria_1'] == 'assenza_fam', 'LEMMA'] = 'familiarity'
        data_topic_tag.loc[data_topic_tag['livello_categoria_1'] == 'assenza_fam', 'CATEGORY'] = 1
        data_topic_tag.loc[data_topic_tag['livello_categoria_1'].str.contains('presenza'), 'CATEGORY'] = 1  # add lemma category tag (i.e. positive or negative lemma info)
        data_topic_tag.loc[data_topic_tag['livello_categoria_1'].str.contains('assenza'), 'CATEGORY'] = 0

        return data_topic_tag

    def save_topic_data(self, output_path):
        '''
        Method for saving the output filtered dataset.

        :param output_path: path where to save the output data
        :type output_path: str

        :return: saves the pandas df to a csv file
        '''

        output_data = self.filter_by_topic()
        output_data.to_csv(output_path, index=False)
